{"version":3,"sources":["App.js","index.js"],"names":["WinnerText","styled","div","_templateObject","Cell","_templateObject2","props","shouldDrawBottomLine","color","Row","_templateObject3","checkWinningState","grid","curPos","_curPos","Object","slicedToArray","r","c","rowStart","rowEnd","length","rowCount","prev","j","isRowValid","count","rStart","range","i","isColumnValid","count1","prev1","console","log","count2","prev2","count3","prev3","count4","prev4","isDiaglognalValid","winningState","Winner","_ref","_ref$player","player","react_default","a","createElement","Board","row","col","_useState","useState","_useState2","currentPlayer","setCurrentPlayer","gridData","React","useRef","Array","from","fill","map","x","_useState3","_useState4","currentPos","setCurrentPos","_useState5","_useState6","isWin","setIsWin","handleClick","e","_JSON$parse","JSON","parse","target","dataset","pos","_JSON$parse2","current","useEffect","_currentPos","Fragment","onClick","key","type","data-pos","stringify","concat","rootElement","document","getElementById","ReactDOM","render","className"],"mappings":"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","file":"static/js/main.d3bcb8f2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport styled from \"styled-components\";\n\nconst WinnerText = styled.div`\n  text-align: center;\n  width: 450px;\n  padding: 10px 0;\n`;\n\nconst Cell = styled.div`\n  width: 30px;\n  height: 30px;\n  border-top: 1px solid black;\n  border-left: 1px solid black;\n  cursor: pointer;\n  border-bottom: ${props =>\n    props.shouldDrawBottomLine ? \"1px solid black\" : \"none\"};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &:after {\n    background: ${props => (props.color !== \"black\" ? \"transparent\" : \"black\")};\n    border: ${props => {\n      if (props.color !== \"brown\") {\n        return \"1px solid black\";\n      } else {\n        return \"none\";\n      }\n    }};\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    display: inline-block;\n    content: \"\";\n  }\n  &:last-child {\n    border-right: 1px solid black;\n  }\n`;\n\nconst Row = styled.div`\n  display: flex;\n  width: 450px;\n`;\n\nfunction isRowValid(grid, r, c) {\n  const offset = 5;\n  const rowStart = c - offset < 0 ? 0 : c - offset;\n  const rowEnd =\n    c + offset > grid[r].length - 1 ? grid[r].length - 1 : c + offset;\n  let rowCount = 0;\n  let prev = grid[r][c];\n  for (let j = rowStart; j <= rowEnd; j++) {\n    if (rowCount === 4) {\n      return true;\n    }\n    if (prev !== 0 && prev === grid[r][j]) {\n      rowCount++;\n    } else {\n      rowCount = 0;\n      prev = grid[r][j];\n    }\n  }\n  return false;\n}\n\nfunction isColumnValid(grid, r, c) {\n  const offset = 5;\n  let count = 0;\n  const rStart = r - offset < 0 ? 0 : r - offset;\n  const range =\n    r + offset > grid.length - 1\n      ? grid.length - 1 - rStart\n      : r + offset - rStart;\n  let prev = grid[rStart][c];\n  for (let i = 0; i < range; i++) {\n    if (count === 4) {\n      return true;\n    }\n    if (rStart + i > grid.length) {\n      break;\n    }\n    if (prev !== 0 && prev === grid[rStart + i][c]) {\n      count++;\n    } else {\n      count = 0;\n      prev = grid[rStart + i][c];\n    }\n  }\n\n  return false;\n}\n\nfunction isDiaglognalValid(grid, r, c) {\n  let count1 = 0;\n  let prev1 = grid[r][c];\n  const offset = 5;\n  for (let i = 0; i <= offset; i++) {\n    if (count1 === 5) {\n      console.log(\"1111\");\n      return true;\n    }\n    if (r + i > grid.length - 1 || c + i > grid[0].length - 1) {\n      break;\n    }\n    if (prev1 !== 0 && prev1 === grid[r + i][c + i]) {\n      count1++;\n    } else {\n      count1 = 0;\n      prev1 = grid[r + i][c + i];\n    }\n  }\n\n  let count2 = 0;\n  let prev2 = grid[r][c];\n  for (let i = 0; i <= offset; i++) {\n    if (count2 === 5) {\n      return true;\n    }\n    if (r - i < 0 || c - i < 0) {\n      break;\n    }\n    if (prev2 !== 0 && prev2 === grid[r - i][c - i]) {\n      count2++;\n    } else {\n      count2 = 0;\n      prev2 = grid[r - i][c - i];\n    }\n  }\n\n  let count3 = 0;\n  let prev3 = grid[r][c];\n  for (let i = 0; i <= offset; i++) {\n    if (count3 === 5) {\n      return true;\n    }\n    if (r - i < 0 || c + i > grid[0].length - 1) {\n      break;\n    }\n    if (prev3 !== 0 && prev3 === grid[r - i][c + i]) {\n      count3++;\n    } else {\n      count3 = 0;\n      prev3 = grid[r - i][c + i];\n    }\n  }\n\n  let count4 = 0;\n  let prev4 = grid[r][c];\n  for (let i = 0; i <= offset; i++) {\n    if (count4 === 5) {\n      return true;\n    }\n    if (r + i > grid.length - 1 || c - i < 0) {\n      break;\n    }\n    if (prev4 !== 0 && prev4 === grid[r + i][c - i]) {\n      count4++;\n    } else {\n      count4 = 0;\n      prev4 = grid[r + i][c - i];\n    }\n  }\n\n  return false;\n}\n\nfunction checkWinningState(grid, curPos) {\n  const [r, c] = curPos;\n  if (r == null || c == null) return false;\n  return (\n    isRowValid(grid, r, c) ||\n    isColumnValid(grid, r, c) ||\n    isDiaglognalValid(grid, r, c)\n  );\n}\n\nconst winningState = [\"white win\", \"\", \"Black win\"];\n\nfunction Winner({ player = 0 }) {\n  return <WinnerText>{winningState[player + 1]}</WinnerText>;\n}\n\nfunction getDefaultGridData(row, col) {\n  const grid = Array.from({ length: row })\n    .fill(0)\n    .map((row, i) => {\n      return Array.from({ length: col })\n        .fill(0)\n        .map((x, i) => 0);\n    });\n  return grid;\n}\n\nfunction Board() {\n  const [currentPlayer, setCurrentPlayer] = useState(1);\n  const gridData = React.useRef(getDefaultGridData(15, 15));\n  const [currentPos, setCurrentPos] = useState([null, null]);\n  const [isWin, setIsWin] = useState(0);\n  useEffect(() => {\n    const [r, c] = currentPos;\n    if (r === null || c === null) return;\n    if (gridData.current[r][c] === 0) {\n      gridData.current[r][c] = currentPlayer;\n    }\n    setIsWin(\n      checkWinningState(gridData.current, currentPos) === true\n        ? currentPlayer\n        : 0\n    );\n    setCurrentPlayer(prev => (prev === 1 ? -1 : 1));\n  }, [currentPos]);\n\n  function handleClick(e) {\n    const [r, c] = JSON.parse(e.target.dataset.pos);\n    if (gridData.current[r][c] === 0 && isWin === 0) {\n      setCurrentPos([r, c]);\n    }\n  }\n\n  function colorCell(type) {\n    if (type === 1) {\n      return \"black\";\n    } else if (type === -1) {\n      return \"white\";\n    } else {\n      return \"brown\";\n    }\n  }\n\n  return (\n    <>\n      {gridData.current.map((row, i) => {\n        return (\n          <Row onClick={handleClick} key={i}>\n            {row.map((c, j) => {\n              return (\n                <Cell\n                  color={colorCell(c)}\n                  data-pos={JSON.stringify([i, j])}\n                  key={`${i}_${j}_${c}`}\n                  shouldDrawBottomLine={i === row.length - 1}\n                />\n              );\n            })}\n          </Row>\n        );\n      })}\n      <Winner player={isWin} />\n    </>\n  );\n}\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}